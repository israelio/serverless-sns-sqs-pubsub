service: sns-sqs-pubsub-example

plugins:
  - serverless-pseudo-parameters

custom:
  stage: ${opt:stage, self:provider.stage}
  topicName: '${self:custom.stage}-sample-sns-topic'
  queueName: '${self:custom.stage}-sample-sqs-queue'
  topicArn: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.topicName}
  queueArn: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.queueName}
provider:
  name: aws
  runtime: nodejs8.10
  environment:
    TOPIC_NAME: ${self:custom.topicName}
    QUEUE_NAME: ${self:custom.queueName}
    accountId: '#{AWS::AccountId}'
    region: '#{AWS::Region}'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: ${self:custom.topicArn}
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:DeleteMessage
        - sqs:ReceiveMessage
      Resource: ${self:custom.queueArn}

functions:
  eventPublisherSNS:
    handler: eventPublisherSNS.eventPublisherSNS
    events:
      - http:
          path: trigger
          method: get
          cors: true

  eventConsumerSQS:
    handler: eventConsumerSQS.eventConsumerSQS
    events:
      - sqs: ${self:custom.queueArn}

resources:
  Resources:
    CustomQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueName}

    CustomQueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: ${self:custom.queueArn}
        TopicArn: ${self:custom.topicArn}

    CustomQueuePolicy:
       Type: AWS::SQS::QueuePolicy
       Properties:
         Queues:
           - Ref: CustomQueue
         PolicyDocument:
           Version: '2012-10-17'
           Statement:
             Sid: Allow-SendMessage-To-${self:custom.queueName}-From-${self:custom.topicName}
             Effect: Allow
             Principal: '*'
             Action:
               - sqs:SendMessage
             Resource: '*'
             Condition:
                ArnEquals:
                  'aws:SourceArn':  ${self:custom.topicArn}
